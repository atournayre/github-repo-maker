name: Continuous Integration

on:
  pull_request:
  push:
    branches:
      - "develop"
      - "main"
      - "master"
env:
  php-extensions: "json, sodium, ctype, iconv"
  php-tools: "composer:v2"

jobs:
  docker_build:
    name: Docker build
    runs-on: "${{ matrix.operating-system }}"
    strategy:
      matrix:
        include:
          - operating-system: "ubuntu-20.04"
            php-version: "8.2"

    steps:
      - name: "GIT > Checkout"
        uses: "actions/checkout@v3"
        with:
          fetch-depth: 0 

      - name: "GIT > Get changed files"
        id: changed-files
        uses: tj-actions/changed-files@v35

      - name: "GIT > List all changed files"
        run: |
          for file in ${{ steps.changed-files.outputs.all_changed_files }}; do
            echo "$file was changed"
          done

      - name: "GIT > Get changed files in the docker folder"
        id: changed-files-specific
        uses: tj-actions/changed-files@v35
        with:
          files: |
            docker
            docker-compose.override.yml
            docker-compose.prod.yml
            docker-compose.yml
            Dockerfile

      - name: "Docker > Pull"
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: docker compose pull
        
      - name: "Docker > UP"
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: docker compose up --build -d
        
      - name: "Docker > Check PHP service"
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: |
            while status="$(docker inspect --format="{{if .Config.Healthcheck}}{{print .State.Health.Status}}{{end}}" "$(docker compose ps -q php)")"; do
              case $status in
                starting) sleep 1;;
                healthy) exit 0;;
                unhealthy) exit 1;;
              esac
            done
            exit 1
          
      - name: "HTTPS > Check reachability"
        if: steps.changed-files-specific.outputs.any_changed == 'true'
        run: curl -k https://localhost
  
  # tests:
  #            - name: PHPUnit
  #              uses: php-actions/phpunit@v3
  #            - name: PHPStan
  #              run: mkdir --parents ${{ github.workspace }}/tools/phpstan/tmp && chmod -R 777 ${{ github.workspace }}/tools/phpstan/tmp && php ${{ github.workspace }}/tools/phpstan/vendor/bin/phpstan analyse src/ --configuration=${{ github.workspace }}/tools/phpstan/phpstsan.neon
  
  static_analysis:
    name: Static analysis
    runs-on: "${{ matrix.operating-system }}"
    strategy:
      matrix:
        include:
          - operating-system: "ubuntu-20.04"
            php-version: "8.2"
    
    steps:
      - name: "GIT > Checkout"
        uses: "actions/checkout@v3"

      - name: "PHP > Install"
        uses: "shivammathur/setup-php@v2"
        with:
          php-version: "${{ matrix.php-version }}"
          extensions: "${{ env.php-extensions }}"
          tools: "${{ env.php-tools }}"
          coverage: "none"

      - name: "Composer > Define cache directory"
        id: "php-composer-cache"
        run: 'echo "::set-output name=dir::$(composer config cache-files-dir)"'

      #            - name: "Validate Composer"
      #              run: "composer validate"

      - name: "Composer > Cache dependencies"
        uses: "actions/cache@v2"
        with:
          path: "${{ steps.php-composer-cache.outputs.dir }}"
          key: "${{ runner.os }}-composer-${{  hashFiles('**/composer.json', '**/composer.lock') }}"
          restore-keys: "${{ runner.os }}-composer-"

      - name: "Project > Install PHP dependencies"
        run: "composer install --no-interaction --no-progress --dev"

      - name: "PHPStan > Install PHP dependencies"
        run: "composer update --no-interaction --no-progress --prefer-dist --prefer-stable --working-dir=tools/phpstan"

      - name: "PHPStan > Cache data"
        uses: "actions/cache@v2"
        with:
          path: "var/tools/PHPStan"
          key: "${{ runner.os }}-phpstan"
          restore-keys: "${{ runner.os }}-phpstan"

      - name: "PHPStan > Run"
        run: "make phpstan"
